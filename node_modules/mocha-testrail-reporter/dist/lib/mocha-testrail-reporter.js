"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MochaTestRailReporter = void 0;
const mocha_1 = require("mocha");
const testrail_1 = require("./testrail");
const shared_1 = require("./shared");
const testrail_interface_1 = require("./testrail.interface");
class MochaTestRailReporter extends mocha_1.reporters.Spec {
    constructor(runner, options) {
        super(runner);
        this.results = [];
        this.passes = 0;
        this.fails = 0;
        this.pending = 0;
        this.out = [];
        let reporterOptions = (options.reporterOptions);
        // validate options
        ["domain", "username", "password", "projectId", "suiteId"].forEach((option) => MochaTestRailReporter.validate(reporterOptions, option));
        runner.on("start", () => { });
        runner.on("suite", () => { });
        runner.on("suite end", () => { });
        runner.on("pending", (test) => {
            this.pending++;
            this.out.push(test.fullTitle() + ": pending");
        });
        runner.on("pass", (test) => {
            this.passes++;
            this.out.push(test.fullTitle() + ": pass");
            let caseIds = (0, shared_1.titleToCaseIds)(test.title);
            if (caseIds.length > 0) {
                if (test.speed === "fast") {
                    let results = caseIds.map((caseId) => {
                        return {
                            case_id: caseId,
                            status_id: testrail_interface_1.Status.Passed,
                            comment: test.title,
                        };
                    });
                    this.results.push(...results);
                }
                else {
                    let results = caseIds.map((caseId) => {
                        return {
                            case_id: caseId,
                            status_id: testrail_interface_1.Status.Passed,
                            comment: `${test.title} (${test.duration}ms)`,
                        };
                    });
                    this.results.push(...results);
                }
            }
        });
        runner.on("fail", (test) => {
            this.fails++;
            this.out.push(test.fullTitle() + ": fail");
            let caseIds = (0, shared_1.titleToCaseIds)(test.title);
            if (caseIds.length > 0) {
                let results = caseIds.map((caseId) => {
                    return {
                        case_id: caseId,
                        status_id: testrail_interface_1.Status.Failed,
                        comment: `${test.title}
${test.err}`,
                    };
                });
                this.results.push(...results);
            }
        });
        runner.on("end", () => {
            if (this.results.length == 0) {
                console.warn("No testcases were matched. Ensure that your tests are declared correctly and matches TCxxx");
            }
            let executionDateTime = new Date().toISOString();
            let total = this.passes + this.fails + this.pending;
            let name = `Automated test run ${executionDateTime}`;
            let description = `Automated test run executed on ${executionDateTime}
Execution summary:
Passes: ${this.passes}
Fails: ${this.fails}
Pending: ${this.pending}
Total: ${total}

Execution details:
${this.out.join("\n")}                     
`;
            new testrail_1.TestRail(reporterOptions).publish(name, description, this.results);
        });
    }
    static validate(options, name) {
        if (options == null) {
            throw new Error("Missing --reporter-options in mocha.opts");
        }
        if (options[name] == null) {
            throw new Error(`Missing ${name} value. Please update --reporter-options in mocha.opts`);
        }
    }
}
exports.MochaTestRailReporter = MochaTestRailReporter;
//# sourceMappingURL=mocha-testrail-reporter.js.map